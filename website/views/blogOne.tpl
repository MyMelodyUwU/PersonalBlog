%rebase('template.tpl')

<h1> How to survive your first sem of computer science. </h1>

<center>
	Hi, my name is Melody (hacker name). I am soon to be a security engineering student at USYD and I am to red-team or pentest for Atlassian after my degree. I have been developing for 2 years now and I focus primarily on OSINT (Because my developing skills are terrible).<br><br>  
	
	This post will primarily focus on general Do's and Dont's, how to ask a stack forum, what is GNU+Linux and why it's being used. This post will also be a guide on how I started and how I am preparing for my first course. This will be targeted at INFO 1110, DATA 1001, COMP 1000, COMP 1511 students who has no prior knowledge which I can provide expertise for. <br><br>  

	Disclaimer: I have only done an equiv of COMP 1511 and COMP 6441 which is targeted for highschoolers, I have provided my own efforts through my extra learning and all resources I use are open-source and free. I have no qualifications and use of my advice is at your own risk. <br>
	<h2> Starting out </h2>
	I have never realised that SDD, 2u/3u Maths , Physics and English will be all carried over to uni. As much as I hated Advanced English, I would not be able to pump out this article for you. Don't drop and forget anything because having prior knowledge is way better than having none. I think the struggle with some students who aren't aware of the use of a computer other than browsing the internet, playing games, or watching youtube. When the semester started, I would camp the first years on discord servers with a friend just to find the hilarious questions that they would ask. I was asked once "I have downloaded WSL, where is python?" Which, was a genuine laughing stock for content, but I realised that he had no prior knowledge, and I had to respect that over-time. <br><br>   	
	Which leads to the first concern I want to bring up, asking questions. When people ask questions on forms which are really stupid and without enough context that we (Who has taken time away from our own concerns) has decided to help you. For computing, everything most people will do is for free and there will be no tutoring centres, no ATAR notes etc etc. It is generally up to how well you are able to surf and absorb the material that you see online. It is a hard road, but eventually you will always refer to a set of cheat-sheets or guides that will support you over 4 years. I recommend for you to have a repository or a drive saved with your resources as it will get lost extremely easily as you browse more. For me, I have a small discord server, with folders for certain elements of computing. It's not for everyone, but it works out for me. Along reading stupid questions, I have also seen new students send questions using a phone, or sending "It doesn't work, please help me." Which they are unsure of their own problem, which makes it un-appealing for us to help. <br><br>  
	Secondly, the way that the question is executed also can be a concern. Sending photos of a screen can hide infomation is valuable or can confuse others of what the real intentions are. What an alternativeshould be is using codeshare.io or even sending a file. <a href="http://www.catb.org/~esr/faqs/smart-questions.html"> This article</a> explains the mindset with asking for help. It is the bible, please keep this safe.<br><br>
	<h2> Learning how to manage </h2>
	This is not an easy feat for new people. Firstly, code will need to be kept clean. Which can be achieved by following a  <a href="https://webcms3.cse.unsw.edu.au/COMP1511/20T3/resources/51404">style guide. </a> I always find this handy when I first started to develop. This slowly explains the important syntaxing fundermentals, which I hated at first, when I was mentoring MQ Comp 1000, I noticed the unclean code which could be easily fixed if they followed the style guide. Secondly, clean code is more important than algorithm, it should be able to be read before advise is given. When I was mentoring, I had an argument with a few students against this. A few ways to get into the clean code habit starts with :syntax onin the bashrc. Personally, I have stopped developing with an IDE myself, then the skills are able to be picked up that way. Thirdly, a CLI interface should be better used. The reason why developers move towards a command line is because they know what they want.      	
</center>

